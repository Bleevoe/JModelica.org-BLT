model Simple
    Real a(start=1, fixed=true);
    Real x;
    Real y;
    Real z;
equation
    der(a) = -x -y -z + 2;
    sqrt(x) + y + sqrt(z) = sqrt(a)+2;
    sqrt(x) + sqrt(y) = sqrt(a)+1;
    x + sqrt(z) = a+1;
end Simple;

model Simple_2
    Real x(start=1, fixed=true);
    Real y;
    Real z;
equation
    der(x) = x + 2*y + 3*z;
    x + y + z + 1 = 0;
    2*x + y + z = 0;
end Simple_2;

optimization Simple_Opt(objectiveIntegrand=x^2, finalTime=10)
    extends Simple;
end Simple_Opt;

optimization Triangular
	constant Integer n = 30;
	Real x[n](each start=1, each fixed=true);
	Real y[n];
equation
	der(x[1]) = x[1] - y[1];
	y[1] = x[1];
	for i in 2 : n loop
		der(x[i]) = x[i] - y[i];
		y[i] = x[i] + cos(y[i-1]);
	end for;
end Triangular;

optimization TriangularOpt(objectiveIntegrand=50*n*(x[n] - 2)^2 + u^2, finalTime=3)
	constant Integer n = 20;
	Real x[n](each start=1, each fixed=true);
	Real y[n];
	input Real u(min=-1, max=1);
equation
	der(x[1]) = x[1] - y[1] + u;
	y[1] = x[1];
	for i in 2 : n loop
		der(x[i]) = x[i] - y[i];
		y[i] = x[i] - cos(y[i-1]);
	end for;
end TriangularOpt;
